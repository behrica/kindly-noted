
---
format:
  html:
    toc: true
    toc-depth: 4
    theme: [spacelab, notebooks/custom.scss]
    output-file: kinds.html
highlight-style: solarized
code-block-background: true
include-in-header: {text: '<link rel = "icon" href = "data:," />'}

---
<style></style><style>.printedClojure .sourceCode {
  background-color: transparent;
  border-style: none;
}
</style>
<script src="kinds_files/md-default2.js" type="text/javascript"></script><script src="kinds_files/md-default3.js" type="text/javascript"></script><script src="kinds_files/vega4.js" type="text/javascript"></script><script src="kinds_files/vega5.js" type="text/javascript"></script><script src="kinds_files/vega6.js" type="text/javascript"></script><script src="kinds_files/cytoscape7.js" type="text/javascript"></script><script src="kinds_files/echarts8.js" type="text/javascript"></script><script src="kinds_files/plotly9.js" type="text/javascript"></script><script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js" type="text/javascript"></script><script src="kinds_files/reagent10.js" type="text/javascript"></script><script src="kinds_files/reagent11.js" type="text/javascript"></script><script src="kinds_files/reagent12.js" type="text/javascript"></script><script src="kinds_files/reagent13.js" type="text/javascript"></script><script src="kinds_files/reagent14.js" type="text/javascript"></script><script src="kinds_files/reagent15.js" type="text/javascript"></script><script src="kinds_files/portal16.js" type="text/javascript"></script><link href="https://cdn.datatables.net/1.13.6/css/jquery.dataTables.min.css" rel="stylesheet" type="text/css" />

::: {.sourceClojure}
```clojure
(ns kinds
  (:require [scicloj.kindly.v4.api :as kindly]
            [scicloj.kindly.v4.kind :as kind]
            [tablecloth.api :as tc]))
```
:::



# Catalogue of visualization kinds
**WIP**

## Markdown - `:kind/md`


::: {.sourceClojure}
```clojure
(-> "hello *hello* **hello**"
    kind/md)
```
:::


hello *hello* **hello**


## Code


::: {.sourceClojure}
```clojure
(-> "(defn f [x] (+ x 9))"
    kind/code)
```
:::



::: {.sourceClojure}
```clojure
(defn f [x] (+ x 9))
```
:::



## Vega-Lite


::: {.sourceClojure}
```clojure
(def my-plot
  (-> {:encoding
       {:y {:field "y", :type "quantitative"},
        :size {:value 400},
        :x {:field "x", :type "quantitative"}},
       :mark {:type "circle", :tooltip true},
       :width 400,
       :background "floralwhite",
       :height 100,
       :data {:values "x,y\n1,1\n2,-4\n3,9\n", :format {:type "csv"}}}
      kind/vega-lite))
```
:::



::: {.sourceClojure}
```clojure
my-plot
```
:::


<div style="max-height:600px;overflow-y:auto;"><div><script>vegaEmbed(document.currentScript.parentElement, {"encoding":{"y":{"field":"y","type":"quantitative"},"size":{"value":400},"x":{"field":"x","type":"quantitative"}},"mark":{"type":"circle","tooltip":true},"width":400,"background":"floralwhite","height":100,"data":{"url":"kinds_files\/0.csv","format":{"type":"csv"}}});</script></div></div>


## Cytoscape


::: {.sourceClojure}
```clojure
(def cytoscape-example
  {:elements {:nodes [{:data {:id "a" :parent "b"} :position {:x 215 :y 85}}
                      {:data {:id "b"}}
                      {:data {:id "c" :parent "b"} :position {:x 300 :y 85}}
                      {:data {:id "d"} :position {:x 215 :y 175}}
                      {:data {:id "e"}}
                      {:data {:id "f" :parent "e"} :position {:x 300 :y 175}}]
              :edges [{:data {:id "ad" :source "a" :target "d"}}
                      {:data {:id "eb" :source "e" :target "b"}}]}
   :style [{:selector "node"
            :css {:content "data(id)"
                  :text-valign "center"
                  :text-halign "center"}}
           {:selector "parent"
            :css {:text-valign "top"
                  :text-halign "center"}}
           {:selector "edge"
            :css {:curve-style "bezier"
                  :target-arrow-shape "triangle"}}]
   :layout {:name "preset"
            :padding 5}})
```
:::



::: {.sourceClojure}
```clojure
(kind/cytoscape
 cytoscape-example)
```
:::


<div style="max-height:600px;overflow-y:auto;"><div style="height:400px;width:400px;"><script>
{
  value = {"elements":{"nodes":[{"data":{"id":"a","parent":"b"},"position":{"x":215,"y":85}},{"data":{"id":"b"}},{"data":{"id":"c","parent":"b"},"position":{"x":300,"y":85}},{"data":{"id":"d"},"position":{"x":215,"y":175}},{"data":{"id":"e"}},{"data":{"id":"f","parent":"e"},"position":{"x":300,"y":175}}],"edges":[{"data":{"id":"ad","source":"a","target":"d"}},{"data":{"id":"eb","source":"e","target":"b"}}]},"style":[{"selector":"node","css":{"content":"data(id)","text-valign":"center","text-halign":"center"}},{"selector":"parent","css":{"text-valign":"top","text-halign":"center"}},{"selector":"edge","css":{"curve-style":"bezier","target-arrow-shape":"triangle"}}],"layout":{"name":"preset","padding":5}};
  value['container'] = document.currentScript.parentElement;
  cytoscape(value);
};</script></div></div>


## ECharts
This example is taken from Apache ECharts' [Getting Started](https://echarts.apache.org/handbook/en/get-started/).


::: {.sourceClojure}
```clojure
(def echarts-example
  {:title {:text "Echarts Example"}
   :tooltip {}
   :legend {:data ["sales"]}
   :xAxis {:data ["Shirts", "Cardigans", "Chiffons",
                  "Pants", "Heels", "Socks"]}
   :yAxis {}
   :series [{:name "sales"
             :type "bar"
             :data [5 20 36
                    10 10 20]}]})
```
:::



::: {.sourceClojure}
```clojure
(kind/echarts
 echarts-example)
```
:::


<div style="max-height:600px;overflow-y:auto;"><div style="height:400px;width:400px;"><script>
{
  var myChart = echarts.init(document.currentScript.parentElement);
  myChart.setOption({"title":{"text":"Echarts Example"},"tooltip":{},"legend":{"data":["sales"]},"xAxis":{"data":["Shirts","Cardigans","Chiffons","Pants","Heels","Socks"]},"yAxis":{},"series":[{"name":"sales","type":"bar","data":[5,20,36,10,10,20]}]});
};</script></div></div>


## Plotly


::: {.sourceClojure}
```clojure
(def plotly-example
  {:data [{:x [0 1 3 2]
           :y [0 6 4 5]
           :z [0 8 9 7]
           :type :scatter3d
           :mode :lines+markers
           :opacity 0.5
           :line {:width 5}
           :marker {:size 4
                    :colorscale :Viridis}}]})
```
:::



::: {.sourceClojure}
```clojure
(kind/plotly
 plotly-example)
```
:::


<div style="max-height:600px;overflow-y:auto;"><div style="height:400px;width:400px;"><script>
Plotly.newPlot(document.currentScript.parentElement,
 {"data":[{"x":[0,1,3,2],"y":[0,6,4,5],"z":[0,8,9,7],"type":"scatter3d","mode":"lines+markers","opacity":0.5,"line":{"width":5},"marker":{"size":4,"colorscale":"Viridis"}}]}['data']
);
</script></div></div>


## Images


::: {.sourceClojure}
```clojure
(def clj-image
  (->  "https://upload.wikimedia.org/wikipedia/commons/e/eb/Ash_Tree_-_geograph.org.uk_-_590710.jpg"
       (java.net.URL.)
       (javax.imageio.ImageIO/read)))
```
:::



::: {.sourceClojure}
```clojure
clj-image
```
:::


<div style="max-height:600px;overflow-y:auto;"><img src="kinds_files/1.png" style="width:100%;" /></div>


## Smile Regression models
A [Smile](https://haifengl.github.io/) regression model is displayed
by turning it into a String
and higlighting the output as printed Clojure.


::: {.sourceClojure}
```clojure
(smile.regression.OLS/fit
 (smile.data.formula.Formula/lhs "y")
 (smile.data.DataFrame/of (into-array [(double-array [1 1 2])
                                       (double-array [2 4 5])
                                       (double-array [3 9 13])
                                       (double-array [4 16 19])])
                          (into-array ["w" "x" "y"])))
```
:::



::: {.printedClojure}
```clojure
Linear Model:

Residuals:
       Min          1Q      Median          3Q         Max
   -1.0500     -0.3500      0.3500      1.0500      1.0500

Coefficients:
                  Estimate Std. Error    t value   Pr(>|t|)
Intercept          -1.2500     4.3575    -0.2869     0.8222 
w                   2.1500     3.9752     0.5408     0.6844 
x                   0.7500     0.7826     0.9583     0.5135 
---------------------------------------------------------------------
Significance codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Residual standard error: 1.5652 on 1 degrees of freedom
Multiple R-squared: 0.9863,    Adjusted R-squared: 0.9589
F-statistic: 35.9796 on 3 and 1 DF,  p-value: 0.1171

```
:::



::: {.sourceClojure}
```clojure
(require '[scicloj.noj.v1.datasets :as datasets]
         '[scicloj.noj.v1.stats :as noj.stats]
         '[scicloj.ml.core :as ml])
```
:::



::: {.sourceClojure}
```clojure
(-> datasets/iris
    (noj.stats/linear-regression-model :sepal-length
                                       [:sepal-width
                                        :petal-width
                                        :petal-length])
    ml/thaw-model)
```
:::



::: {.printedClojure}
```clojure
Linear Model:

Residuals:
       Min          1Q      Median          3Q         Max
   -0.8282     -0.2202      0.0191      0.1992      0.8457

Coefficients:
                  Estimate Std. Error    t value   Pr(>|t|)
Intercept           1.8560     0.2508     7.4010     0.0000 ***
sepal-width         0.6508     0.0666     9.7654     0.0000 ***
petal-width        -0.5565     0.1275    -4.3629     0.0000 ***
petal-length        0.7091     0.0567    12.5025     0.0000 ***
---------------------------------------------------------------------
Significance codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Residual standard error: 0.3145 on 146 degrees of freedom
Multiple R-squared: 0.8586,    Adjusted R-squared: 0.8557
F-statistic: 295.5391 on 4 and 146 DF,  p-value: 8.588e-62

```
:::



## Dataset
A tech.ml.dataset / Tablecloth dataset is printed and rendered as Markdown.


::: {.sourceClojure}
```clojure
(def my-dataset
  (-> {:x (range 40)}
      tc/dataset
      (tc/map-columns :y
                      [:x]
                      (fn [x] (* x x)))))
```
:::



::: {.sourceClojure}
```clojure
my-dataset
```
:::


_unnamed [40 2]:

|  :x |   :y |
|----:|-----:|
|   0 |    0 |
|   1 |    1 |
|   2 |    4 |
|   3 |    9 |
|   4 |   16 |
|   5 |   25 |
|   6 |   36 |
|   7 |   49 |
|   8 |   64 |
|   9 |   81 |
| ... |  ... |
|  29 |  841 |
|  30 |  900 |
|  31 |  961 |
|  32 | 1024 |
|  33 | 1089 |
|  34 | 1156 |
|  35 | 1225 |
|  36 | 1296 |
|  37 | 1369 |
|  38 | 1444 |
|  39 | 1521 |




## Table
A table uses the tool's UI for tables, if any.


::: {.sourceClojure}
```clojure
(kind/table my-dataset)
```
:::


<div style="max-height:600px;overflow-y:auto;"><table class="table"><thead><tr><th>x</th><th>y</th></tr></thead><tbody><tr><td><div><p>0</p></div></td><td><div><p>0</p></div></td></tr><tr><td><div><p>1</p></div></td><td><div><p>1</p></div></td></tr><tr><td><div><p>2</p></div></td><td><div><p>4</p></div></td></tr><tr><td><div><p>3</p></div></td><td><div><p>9</p></div></td></tr><tr><td><div><p>4</p></div></td><td><div><p>16</p></div></td></tr><tr><td><div><p>5</p></div></td><td><div><p>25</p></div></td></tr><tr><td><div><p>6</p></div></td><td><div><p>36</p></div></td></tr><tr><td><div><p>7</p></div></td><td><div><p>49</p></div></td></tr><tr><td><div><p>8</p></div></td><td><div><p>64</p></div></td></tr><tr><td><div><p>9</p></div></td><td><div><p>81</p></div></td></tr><tr><td><div><p>10</p></div></td><td><div><p>100</p></div></td></tr><tr><td><div><p>11</p></div></td><td><div><p>121</p></div></td></tr><tr><td><div><p>12</p></div></td><td><div><p>144</p></div></td></tr><tr><td><div><p>13</p></div></td><td><div><p>169</p></div></td></tr><tr><td><div><p>14</p></div></td><td><div><p>196</p></div></td></tr><tr><td><div><p>15</p></div></td><td><div><p>225</p></div></td></tr><tr><td><div><p>16</p></div></td><td><div><p>256</p></div></td></tr><tr><td><div><p>17</p></div></td><td><div><p>289</p></div></td></tr><tr><td><div><p>18</p></div></td><td><div><p>324</p></div></td></tr><tr><td><div><p>19</p></div></td><td><div><p>361</p></div></td></tr><tr><td><div><p>20</p></div></td><td><div><p>400</p></div></td></tr><tr><td><div><p>21</p></div></td><td><div><p>441</p></div></td></tr><tr><td><div><p>22</p></div></td><td><div><p>484</p></div></td></tr><tr><td><div><p>23</p></div></td><td><div><p>529</p></div></td></tr><tr><td><div><p>24</p></div></td><td><div><p>576</p></div></td></tr><tr><td><div><p>25</p></div></td><td><div><p>625</p></div></td></tr><tr><td><div><p>26</p></div></td><td><div><p>676</p></div></td></tr><tr><td><div><p>27</p></div></td><td><div><p>729</p></div></td></tr><tr><td><div><p>28</p></div></td><td><div><p>784</p></div></td></tr><tr><td><div><p>29</p></div></td><td><div><p>841</p></div></td></tr><tr><td><div><p>30</p></div></td><td><div><p>900</p></div></td></tr><tr><td><div><p>31</p></div></td><td><div><p>961</p></div></td></tr><tr><td><div><p>32</p></div></td><td><div><p>1024</p></div></td></tr><tr><td><div><p>33</p></div></td><td><div><p>1089</p></div></td></tr><tr><td><div><p>34</p></div></td><td><div><p>1156</p></div></td></tr><tr><td><div><p>35</p></div></td><td><div><p>1225</p></div></td></tr><tr><td><div><p>36</p></div></td><td><div><p>1296</p></div></td></tr><tr><td><div><p>37</p></div></td><td><div><p>1369</p></div></td></tr><tr><td><div><p>38</p></div></td><td><div><p>1444</p></div></td></tr><tr><td><div><p>39</p></div></td><td><div><p>1521</p></div></td></tr></tbody></table></div>

Some tools support [datatables](https://datatables.net/) for displaying tables.


::: {.sourceClojure}
```clojure
(-> my-dataset
    (kind/table {:use-datatables true}))
```
:::


<div style="max-height:600px;overflow-y:auto;"><table class="table"><thead><tr><th>x</th><th>y</th></tr></thead><tbody><tr><td><div><p>0</p></div></td><td><div><p>0</p></div></td></tr><tr><td><div><p>1</p></div></td><td><div><p>1</p></div></td></tr><tr><td><div><p>2</p></div></td><td><div><p>4</p></div></td></tr><tr><td><div><p>3</p></div></td><td><div><p>9</p></div></td></tr><tr><td><div><p>4</p></div></td><td><div><p>16</p></div></td></tr><tr><td><div><p>5</p></div></td><td><div><p>25</p></div></td></tr><tr><td><div><p>6</p></div></td><td><div><p>36</p></div></td></tr><tr><td><div><p>7</p></div></td><td><div><p>49</p></div></td></tr><tr><td><div><p>8</p></div></td><td><div><p>64</p></div></td></tr><tr><td><div><p>9</p></div></td><td><div><p>81</p></div></td></tr><tr><td><div><p>10</p></div></td><td><div><p>100</p></div></td></tr><tr><td><div><p>11</p></div></td><td><div><p>121</p></div></td></tr><tr><td><div><p>12</p></div></td><td><div><p>144</p></div></td></tr><tr><td><div><p>13</p></div></td><td><div><p>169</p></div></td></tr><tr><td><div><p>14</p></div></td><td><div><p>196</p></div></td></tr><tr><td><div><p>15</p></div></td><td><div><p>225</p></div></td></tr><tr><td><div><p>16</p></div></td><td><div><p>256</p></div></td></tr><tr><td><div><p>17</p></div></td><td><div><p>289</p></div></td></tr><tr><td><div><p>18</p></div></td><td><div><p>324</p></div></td></tr><tr><td><div><p>19</p></div></td><td><div><p>361</p></div></td></tr><tr><td><div><p>20</p></div></td><td><div><p>400</p></div></td></tr><tr><td><div><p>21</p></div></td><td><div><p>441</p></div></td></tr><tr><td><div><p>22</p></div></td><td><div><p>484</p></div></td></tr><tr><td><div><p>23</p></div></td><td><div><p>529</p></div></td></tr><tr><td><div><p>24</p></div></td><td><div><p>576</p></div></td></tr><tr><td><div><p>25</p></div></td><td><div><p>625</p></div></td></tr><tr><td><div><p>26</p></div></td><td><div><p>676</p></div></td></tr><tr><td><div><p>27</p></div></td><td><div><p>729</p></div></td></tr><tr><td><div><p>28</p></div></td><td><div><p>784</p></div></td></tr><tr><td><div><p>29</p></div></td><td><div><p>841</p></div></td></tr><tr><td><div><p>30</p></div></td><td><div><p>900</p></div></td></tr><tr><td><div><p>31</p></div></td><td><div><p>961</p></div></td></tr><tr><td><div><p>32</p></div></td><td><div><p>1024</p></div></td></tr><tr><td><div><p>33</p></div></td><td><div><p>1089</p></div></td></tr><tr><td><div><p>34</p></div></td><td><div><p>1156</p></div></td></tr><tr><td><div><p>35</p></div></td><td><div><p>1225</p></div></td></tr><tr><td><div><p>36</p></div></td><td><div><p>1296</p></div></td></tr><tr><td><div><p>37</p></div></td><td><div><p>1369</p></div></td></tr><tr><td><div><p>38</p></div></td><td><div><p>1444</p></div></td></tr><tr><td><div><p>39</p></div></td><td><div><p>1521</p></div></td></tr></tbody><script>new DataTable(document.currentScript.parentElement, {"paging":false,"scrollY":400,"sPaginationType":"full_numbers","order":[]});</script></table></div>

and in this case the user may specify [datatables options](https://datatables.net/manual/options)
(see [the full list](https://datatables.net/reference/option/)).


::: {.sourceClojure}
```clojure
(-> my-dataset
    (kind/table {:use-datatables true
                 :datatables {:scrollY 200}}))
```
:::


<div style="max-height:600px;overflow-y:auto;"><table class="table"><thead><tr><th>x</th><th>y</th></tr></thead><tbody><tr><td><div><p>0</p></div></td><td><div><p>0</p></div></td></tr><tr><td><div><p>1</p></div></td><td><div><p>1</p></div></td></tr><tr><td><div><p>2</p></div></td><td><div><p>4</p></div></td></tr><tr><td><div><p>3</p></div></td><td><div><p>9</p></div></td></tr><tr><td><div><p>4</p></div></td><td><div><p>16</p></div></td></tr><tr><td><div><p>5</p></div></td><td><div><p>25</p></div></td></tr><tr><td><div><p>6</p></div></td><td><div><p>36</p></div></td></tr><tr><td><div><p>7</p></div></td><td><div><p>49</p></div></td></tr><tr><td><div><p>8</p></div></td><td><div><p>64</p></div></td></tr><tr><td><div><p>9</p></div></td><td><div><p>81</p></div></td></tr><tr><td><div><p>10</p></div></td><td><div><p>100</p></div></td></tr><tr><td><div><p>11</p></div></td><td><div><p>121</p></div></td></tr><tr><td><div><p>12</p></div></td><td><div><p>144</p></div></td></tr><tr><td><div><p>13</p></div></td><td><div><p>169</p></div></td></tr><tr><td><div><p>14</p></div></td><td><div><p>196</p></div></td></tr><tr><td><div><p>15</p></div></td><td><div><p>225</p></div></td></tr><tr><td><div><p>16</p></div></td><td><div><p>256</p></div></td></tr><tr><td><div><p>17</p></div></td><td><div><p>289</p></div></td></tr><tr><td><div><p>18</p></div></td><td><div><p>324</p></div></td></tr><tr><td><div><p>19</p></div></td><td><div><p>361</p></div></td></tr><tr><td><div><p>20</p></div></td><td><div><p>400</p></div></td></tr><tr><td><div><p>21</p></div></td><td><div><p>441</p></div></td></tr><tr><td><div><p>22</p></div></td><td><div><p>484</p></div></td></tr><tr><td><div><p>23</p></div></td><td><div><p>529</p></div></td></tr><tr><td><div><p>24</p></div></td><td><div><p>576</p></div></td></tr><tr><td><div><p>25</p></div></td><td><div><p>625</p></div></td></tr><tr><td><div><p>26</p></div></td><td><div><p>676</p></div></td></tr><tr><td><div><p>27</p></div></td><td><div><p>729</p></div></td></tr><tr><td><div><p>28</p></div></td><td><div><p>784</p></div></td></tr><tr><td><div><p>29</p></div></td><td><div><p>841</p></div></td></tr><tr><td><div><p>30</p></div></td><td><div><p>900</p></div></td></tr><tr><td><div><p>31</p></div></td><td><div><p>961</p></div></td></tr><tr><td><div><p>32</p></div></td><td><div><p>1024</p></div></td></tr><tr><td><div><p>33</p></div></td><td><div><p>1089</p></div></td></tr><tr><td><div><p>34</p></div></td><td><div><p>1156</p></div></td></tr><tr><td><div><p>35</p></div></td><td><div><p>1225</p></div></td></tr><tr><td><div><p>36</p></div></td><td><div><p>1296</p></div></td></tr><tr><td><div><p>37</p></div></td><td><div><p>1369</p></div></td></tr><tr><td><div><p>38</p></div></td><td><div><p>1444</p></div></td></tr><tr><td><div><p>39</p></div></td><td><div><p>1521</p></div></td></tr></tbody><script>new DataTable(document.currentScript.parentElement, {"paging":false,"scrollY":200,"sPaginationType":"full_numbers","order":[]});</script></table></div>


## Reagent


::: {.sourceClojure}
```clojure
(kind/reagent
 ['(fn [data]
     [:div {:style {:background "#ccddcc"}}
      [:big (count data)]])
  (vec (range 99))])
```
:::


<div style="max-height:600px;overflow-y:auto;"><div id="id3"><script type="application/x-scittle">(reagent.dom/render [(fn [data] [:div {:style {:background "#ccddcc"}} [:big (count data)]]) [0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98]] (js/document.getElementById "id3"))</script></div></div>


## Pretty printing


::: {.sourceClojure}
```clojure
(->> (range 30)
     (apply array-map)
     kind/pprint)
```
:::



::: {.printedClojure}
```clojure
{0 1,
 2 3,
 4 5,
 6 7,
 8 9,
 10 11,
 12 13,
 14 15,
 16 17,
 18 19,
 20 21,
 22 23,
 24 25,
 26 27,
 28 29}

```
:::



## Hidden


::: {.sourceClojure}
```clojure
(->> {:x 9}
     kind/hidden)
```
:::





## Plain data structures
Plain Clojure data structures have recursive kind semantics:
* Each tool has its own way to represent them visually
(e.g., Clay just uses text, while Portal has a hierarchical navigation UI).


::: {.sourceClojure}
```clojure
(list 1 "A" :B 'C)
```
:::



::: {.printedClojure}
```clojure
(1 "A" :B C)

```
:::



::: {.sourceClojure}
```clojure
[1 "A" :B 'C]
```
:::



::: {.printedClojure}
```clojure
[1 "A" :B C]

```
:::



::: {.sourceClojure}
```clojure
#{1 "A" :B 'C}
```
:::



::: {.printedClojure}
```clojure
#{1 :B C "A"}

```
:::



::: {.sourceClojure}
```clojure
{1 "A" :B 'C}
```
:::



::: {.printedClojure}
```clojure
{1 "A", :B C}

```
:::



## Plain data structures - nesting other kinds
* If the values inside them have kind information, they are handled accordingly.


::: {.sourceClojure}
```clojure
[(kind/hiccup
  [:div {:style
         {:background-color "floralwhite"}}
   [:p "hello"]])
 (kind/md
  "hello *hello* **hello**")
 (kind/code
  "(defn f [x] (+ x 9))")]
```
:::


<div style="max-height:600px;overflow-y:auto;"><div><p>\[</p><div style="margin-left:10%;width:110%;"><div style="max-height:600px;overflow-y:auto;"><div style="background-color:floralwhite;"><p>hello</p></div></div><div><p>hello <em>hello</em> <strong>hello</strong></p></div><div style="max-height:600px;overflow-y:auto;"><div><pre><code class="language-clojure bg-light">(defn f [x] (+ x 9))</code></pre></div></div></div><p>\]</p></div></div>


::: {.sourceClojure}
```clojure
{:x  (kind/md
      "**hello**")
 (kind/md
  "**hello**") :x}
```
:::


<div style="max-height:600px;overflow-y:auto;"><div><p>{</p><div style="margin-left:10%;width:110%;"><table><tr><td valign="top"><div style="max-height:600px;overflow-y:auto;"><div><pre><code class="language-clojure">:x
</code></pre></div></div></td><td><div style="margin-left:10px;"><div><p><strong>hello</strong></p></div></div></td></tr></table><table><tr><td valign="top"><div><p><strong>hello</strong></p></div></td><td><div style="margin-left:10px;"><div style="max-height:600px;overflow-y:auto;"><div><pre><code class="language-clojure">:x
</code></pre></div></div></div></td></tr></table></div><p>}</p></div></div>


## Hiccup


::: {.sourceClojure}
```clojure
(-> [:div {:style
           {:background-color "floralwhite"}}
     [:p "hello"]]
    kind/hiccup)
```
:::


<div style="max-height:600px;overflow-y:auto;"><div style="background-color:floralwhite;"><p>hello</p></div></div>


## Hiccup - nesting other kinds


::: {.sourceClojure}
```clojure
(-> [:div {:style
           {:background-color "floralwhite"
            :border-style "solid"}}
     [:p {:style {:background-color "#ccddcc"
                  :border-style "solid"}}
      "hello"]
     (kind/md
      "hello *hello* **hello**")
     (kind/code
      "(defn f [x] (+ x 9))")
     my-plot]
    kind/hiccup)
```
:::


<div style="max-height:600px;overflow-y:auto;"><div style="background-color:floralwhite;border-style:solid;"><p style="background-color:#ccddcc;border-style:solid;">hello</p><div><p>hello <em>hello</em> <strong>hello</strong></p></div><div style="max-height:600px;overflow-y:auto;"><div><pre><code class="language-clojure bg-light">(defn f [x] (+ x 9))</code></pre></div></div><div style="max-height:600px;overflow-y:auto;"><div><script>vegaEmbed(document.currentScript.parentElement, {"encoding":{"y":{"field":"y","type":"quantitative"},"size":{"value":400},"x":{"field":"x","type":"quantitative"}},"mark":{"type":"circle","tooltip":true},"width":400,"background":"floralwhite","height":100,"data":{"url":"kinds_files\/0.csv","format":{"type":"csv"}}});</script></div></div></div></div>


## Portal


::: {.sourceClojure}
```clojure
(-> [(kind/hiccup [:p {:style {:background-color "#ccddcc"
                               :border-style "solid"}}
                   "hello"])
     (kind/md
      "hello *hello* **hello**")
     (kind/code
      "(defn f [x] (+ x 9))")
     my-plot]
    kind/portal)
```
:::


<div style="max-height:600px;overflow-y:auto;"><div><script>portal_api.embed().renderOutputItem(
                {'mime': 'x-application/edn',
                 'text': (() => "[^{:source \"[:p {:style {:background-color \\\"#ccddcc\\\"\\n                               :border-style \\\"solid\\\"}}\\n                   \\\"hello\\\"]\", :line 239, :column 19, :end-line 241, :end-column 28, :kindly/kind :kind/hiccup, :portal.viewer/default :portal.viewer/hiccup} [:p ^{:source \"{:style {:background-color \\\"#ccddcc\\\"\\n                               :border-style \\\"solid\\\"}}\", :line 239, :column 23, :end-line 240, :end-column 55} {:style ^{:source \"{:background-color \\\"#ccddcc\\\"\\n                               :border-style \\\"solid\\\"}\", :line 239, :column 31, :end-line 240, :end-column 54} {:background-color \"#ccddcc\", :border-style \"solid\"}} \"hello\"] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div [:portal.viewer/markdown \"hello *hello* **hello**\"]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div [:portal.viewer/code \"(defn f [x] (+ x 9))\"]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:portal.viewer/vega-lite ^{:source \"{:encoding\\n       {:y {:field \\\"y\\\", :type \\\"quantitative\\\"},\\n        :size {:value 400},\\n        :x {:field \\\"x\\\", :type \\\"quantitative\\\"}},\\n       :mark {:type \\\"circle\\\", :tooltip true},\\n       :width 400,\\n       :background \\\"floralwhite\\\",\\n       :height 100,\\n       :data {:values \\\"x,y\\\\n1,1\\\\n2,-4\\\\n3,9\\\\n\\\", :format {:type \\\"csv\\\"}}}\", :line 22, :column 7, :end-line 30, :end-column 71, :kindly/kind :kind/vega-lite} {:encoding ^{:source \"{:y {:field \\\"y\\\", :type \\\"quantitative\\\"},\\n        :size {:value 400},\\n        :x {:field \\\"x\\\", :type \\\"quantitative\\\"}}\", :line 23, :column 8, :end-line 25, :end-column 47} {:y ^{:source \"{:field \\\"y\\\", :type \\\"quantitative\\\"}\", :line 23, :column 12, :end-line 23, :end-column 46} {:field \"y\", :type \"quantitative\"}, :size ^{:source \"{:value 400}\", :line 24, :column 15, :end-line 24, :end-column 27} {:value 400}, :x ^{:source \"{:field \\\"x\\\", :type \\\"quantitative\\\"}\", :line 25, :column 12, :end-line 25, :end-column 46} {:field \"x\", :type \"quantitative\"}}, :mark ^{:source \"{:type \\\"circle\\\", :tooltip true}\", :line 26, :column 14, :end-line 26, :end-column 45} {:type \"circle\", :tooltip true}, :width 400, :background \"floralwhite\", :height 100, :data ^{:source \"{:values \\\"x,y\\\\n1,1\\\\n2,-4\\\\n3,9\\\\n\\\", :format {:type \\\"csv\\\"}}\", :line 30, :column 14, :end-line 30, :end-column 70} {:values \"x,y\\n1,1\\n2,-4\\n3,9\\n\", :format ^{:source \"{:type \\\"csv\\\"}\", :line 30, :column 56, :end-line 30, :end-column 69} {:type \"csv\"}}}]]")}
                , document.currentScript.parentElement);</script></div></div>

<div style="background-color:grey;height:2px;width:100%;"></div>

<div><pre><small><small>source: <a href="https://github.com/scicloj/kindly-noted/blob/main/notebooks/kinds.clj">notebooks/kinds.clj</a></small></small></pre></div>