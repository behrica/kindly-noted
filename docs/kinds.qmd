
---
format:
  html:
    toc: true
    toc-depth: 4
    theme: [spacelab, notebooks/custom.scss]
    output-file: kinds.html
highlight-style: solarized
code-block-background: true
include-in-header: {text: '<link rel = "icon" href = "data:," />'}

---
<style></style><style>.printedClojure .sourceCode {
  background-color: transparent;
  border-style: none;
}
</style>
<script src="kinds_files/md-default2.js" type="text/javascript"></script><script src="kinds_files/md-default3.js" type="text/javascript"></script><script src="kinds_files/vega4.js" type="text/javascript"></script><script src="kinds_files/vega5.js" type="text/javascript"></script><script src="kinds_files/vega6.js" type="text/javascript"></script><script src="kinds_files/reagent7.js" type="text/javascript"></script><script src="kinds_files/reagent8.js" type="text/javascript"></script><script src="kinds_files/reagent9.js" type="text/javascript"></script><script src="kinds_files/reagent10.js" type="text/javascript"></script><script src="kinds_files/reagent11.js" type="text/javascript"></script><script src="kinds_files/reagent12.js" type="text/javascript"></script><script src="kinds_files/portal13.js" type="text/javascript"></script>

::: {.sourceClojure}
```clojure
(ns kinds
  (:require [scicloj.kindly.v4.api :as kindly]
            [scicloj.kindly.v4.kind :as kind]
            [tablecloth.api :as tc]))
```
:::



# Catalogue of visualization kinds
**WIP**

## Markdown - `:kind/md`


::: {.sourceClojure}
```clojure
(-> "hello *hello* **hello**"
    kind/md)
```
:::


hello *hello* **hello**


## Code


::: {.sourceClojure}
```clojure
(-> "(defn f [x] (+ x 9))"
    kind/code)
```
:::



::: {.sourceClojure}
```clojure
(defn f [x] (+ x 9))
```
:::



## Vega-Lite


::: {.sourceClojure}
```clojure
(def my-plot
  (-> {:encoding
       {:y {:field "y", :type "quantitative"},
        :size {:value 400},
        :x {:field "x", :type "quantitative"}},
       :mark {:type "circle", :tooltip true},
       :width 400,
       :background "floralwhite",
       :height 100,
       :data {:values "x,y\n1,1\n2,-4\n3,9\n", :format {:type "csv"}}}
      kind/vega-lite))
```
:::



::: {.sourceClojure}
```clojure
my-plot
```
:::


<div style="max-height:600px;overflow-y:auto;"><div><script>vegaEmbed(document.currentScript.parentElement, {"encoding":{"y":{"field":"y","type":"quantitative"},"size":{"value":400},"x":{"field":"x","type":"quantitative"}},"mark":{"type":"circle","tooltip":true},"width":400,"background":"floralwhite","height":100,"data":{"url":"kinds_files\/0.csv","format":{"type":"csv"}}});</script></div></div>


## Images


::: {.sourceClojure}
```clojure
(def clj-image
  (->  "https://upload.wikimedia.org/wikipedia/commons/e/eb/Ash_Tree_-_geograph.org.uk_-_590710.jpg"
       (java.net.URL.)
       (javax.imageio.ImageIO/read)))
```
:::



::: {.sourceClojure}
```clojure
clj-image
```
:::


<div style="max-height:600px;overflow-y:auto;"><img src="kinds_files/1.png" style="width:100%;" /></div>


## Datasets


::: {.sourceClojure}
```clojure
(def my-dataset
  (-> {:x (range 3)}
      tc/dataset
      (tc/map-columns :y
                      [:x]
                      (fn [x] (* x x)))))
```
:::



::: {.sourceClojure}
```clojure
my-dataset
```
:::


_unnamed [3 2]:

| :x | :y |
|---:|---:|
|  0 |  0 |
|  1 |  1 |
|  2 |  4 |




## Reagent


::: {.sourceClojure}
```clojure
(kind/reagent
 ['(fn [data]
     [:div {:style {:background "#ccddcc"}}
      [:big (count data)]])
  (vec (range 99))])
```
:::


<div style="max-height:600px;overflow-y:auto;"><div id="id10"><script type="application/x-scittle">(reagent.dom/render [(fn [data] [:div {:style {:background "#ccddcc"}} [:big (count data)]]) [0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98]] (js/document.getElementById "id10"))</script></div></div>


## Pretty printing


::: {.sourceClojure}
```clojure
(->> (range 30)
     (apply array-map)
     kind/pprint)
```
:::



::: {.printedClojure}
```clojure
{0 1,
 2 3,
 4 5,
 6 7,
 8 9,
 10 11,
 12 13,
 14 15,
 16 17,
 18 19,
 20 21,
 22 23,
 24 25,
 26 27,
 28 29}

```
:::



## Hidden


::: {.sourceClojure}
```clojure
(->> {:x 9}
     kind/hidden)
```
:::





## Plain data structures
Plain Clojure data structures have recursive kind semantics:
* Each tool has its own way to represent them visually
(e.g., Clay just uses text, while Portal has a hierarchical navigation UI).


::: {.sourceClojure}
```clojure
(list 1 "A" :B 'C)
```
:::



::: {.printedClojure}
```clojure
(1 "A" :B C)

```
:::



::: {.sourceClojure}
```clojure
[1 "A" :B 'C]
```
:::



::: {.printedClojure}
```clojure
[1 "A" :B C]

```
:::



::: {.sourceClojure}
```clojure
#{1 "A" :B 'C}
```
:::



::: {.printedClojure}
```clojure
#{1 :B C "A"}

```
:::



::: {.sourceClojure}
```clojure
{1 "A" :B 'C}
```
:::



::: {.printedClojure}
```clojure
{1 "A", :B C}

```
:::



## Plain data structures - nesting other kinds
* If the values inside them have kind information, they are handled accordingly.


::: {.sourceClojure}
```clojure
[(kind/hiccup
  [:div {:style
         {:background-color "floralwhite"}}
   [:p "hello"]])
 (kind/md
  "hello *hello* **hello**")
 (kind/code
  "(defn f [x] (+ x 9))")]
```
:::


<div style="max-height:600px;overflow-y:auto;"><div><p>\[</p><div style="margin-left:10%;width:110%;"><div style="max-height:600px;overflow-y:auto;"><div style="background-color:floralwhite;"><p>hello</p></div></div><div><p>hello <em>hello</em> <strong>hello</strong></p></div><div style="max-height:600px;overflow-y:auto;"><div><pre><code class="language-clojure bg-light">(defn f [x] (+ x 9))</code></pre></div></div></div><p>\]</p></div></div>


::: {.sourceClojure}
```clojure
{:x  (kind/md
      "**hello**")
 (kind/md
  "**hello**") :x}
```
:::


<div style="max-height:600px;overflow-y:auto;"><div><p>{</p><div style="margin-left:10%;width:110%;"><table><tr><td valign="top"><div style="max-height:600px;overflow-y:auto;"><div><pre><code class="language-clojure">:x
</code></pre></div></div></td><td><div style="margin-left:10px;"><div><p><strong>hello</strong></p></div></div></td></tr></table><table><tr><td valign="top"><div><p><strong>hello</strong></p></div></td><td><div style="margin-left:10px;"><div style="max-height:600px;overflow-y:auto;"><div><pre><code class="language-clojure">:x
</code></pre></div></div></div></td></tr></table></div><p>}</p></div></div>


## Hiccup


::: {.sourceClojure}
```clojure
(-> [:div {:style
           {:background-color "floralwhite"}}
     [:p "hello"]]
    kind/hiccup)
```
:::


<div style="max-height:600px;overflow-y:auto;"><div style="background-color:floralwhite;"><p>hello</p></div></div>


## Hiccup - nesting other kinds


::: {.sourceClojure}
```clojure
(-> [:div {:style
           {:background-color "floralwhite"
            :border-style "solid"}}
     [:p {:style {:background-color "#ccddcc"
                  :border-style "solid"}}
      "hello"]
     (kind/md
      "hello *hello* **hello**")
     (kind/code
      "(defn f [x] (+ x 9))")
     my-plot]
    kind/hiccup)
```
:::


<div style="max-height:600px;overflow-y:auto;"><div style="background-color:floralwhite;border-style:solid;"><p style="background-color:#ccddcc;border-style:solid;">hello</p><div><p>hello <em>hello</em> <strong>hello</strong></p></div><div style="max-height:600px;overflow-y:auto;"><div><pre><code class="language-clojure bg-light">(defn f [x] (+ x 9))</code></pre></div></div><div style="max-height:600px;overflow-y:auto;"><div><script>vegaEmbed(document.currentScript.parentElement, {"encoding":{"y":{"field":"y","type":"quantitative"},"size":{"value":400},"x":{"field":"x","type":"quantitative"}},"mark":{"type":"circle","tooltip":true},"width":400,"background":"floralwhite","height":100,"data":{"url":"kinds_files\/0.csv","format":{"type":"csv"}}});</script></div></div></div></div>


## Portal


::: {.sourceClojure}
```clojure
(-> [(kind/hiccup [:p {:style {:background-color "#ccddcc"
                               :border-style "solid"}}
                   "hello"])
     (kind/md
      "hello *hello* **hello**")
     (kind/code
      "(defn f [x] (+ x 9))")
     my-plot]
    kind/portal)
```
:::


<div style="max-height:600px;overflow-y:auto;"><div><script>portal_api.embed().renderOutputItem(
                {'mime': 'x-application/edn',
                 'text': (() => "[^{:source \"[:p {:style {:background-color \\\"#ccddcc\\\"\\n                               :border-style \\\"solid\\\"}}\\n                   \\\"hello\\\"]\", :line 127, :column 19, :end-line 129, :end-column 28, :kindly/kind :kind/hiccup, :portal.viewer/default :portal.viewer/hiccup} [:p ^{:source \"{:style {:background-color \\\"#ccddcc\\\"\\n                               :border-style \\\"solid\\\"}}\", :line 127, :column 23, :end-line 128, :end-column 55} {:style ^{:source \"{:background-color \\\"#ccddcc\\\"\\n                               :border-style \\\"solid\\\"}\", :line 127, :column 31, :end-line 128, :end-column 54} {:background-color \"#ccddcc\", :border-style \"solid\"}} \"hello\"] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div [:portal.viewer/markdown \"hello *hello* **hello**\"]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div [:portal.viewer/code \"(defn f [x] (+ x 9))\"]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:portal.viewer/vega-lite ^{:source \"{:encoding\\n       {:y {:field \\\"y\\\", :type \\\"quantitative\\\"},\\n        :size {:value 400},\\n        :x {:field \\\"x\\\", :type \\\"quantitative\\\"}},\\n       :mark {:type \\\"circle\\\", :tooltip true},\\n       :width 400,\\n       :background \\\"floralwhite\\\",\\n       :height 100,\\n       :data {:values \\\"x,y\\\\n1,1\\\\n2,-4\\\\n3,9\\\\n\\\", :format {:type \\\"csv\\\"}}}\", :line 22, :column 7, :end-line 30, :end-column 71, :kindly/kind :kind/vega-lite} {:encoding ^{:source \"{:y {:field \\\"y\\\", :type \\\"quantitative\\\"},\\n        :size {:value 400},\\n        :x {:field \\\"x\\\", :type \\\"quantitative\\\"}}\", :line 23, :column 8, :end-line 25, :end-column 47} {:y ^{:source \"{:field \\\"y\\\", :type \\\"quantitative\\\"}\", :line 23, :column 12, :end-line 23, :end-column 46} {:field \"y\", :type \"quantitative\"}, :size ^{:source \"{:value 400}\", :line 24, :column 15, :end-line 24, :end-column 27} {:value 400}, :x ^{:source \"{:field \\\"x\\\", :type \\\"quantitative\\\"}\", :line 25, :column 12, :end-line 25, :end-column 46} {:field \"x\", :type \"quantitative\"}}, :mark ^{:source \"{:type \\\"circle\\\", :tooltip true}\", :line 26, :column 14, :end-line 26, :end-column 45} {:type \"circle\", :tooltip true}, :width 400, :background \"floralwhite\", :height 100, :data ^{:source \"{:values \\\"x,y\\\\n1,1\\\\n2,-4\\\\n3,9\\\\n\\\", :format {:type \\\"csv\\\"}}\", :line 30, :column 14, :end-line 30, :end-column 70} {:values \"x,y\\n1,1\\n2,-4\\n3,9\\n\", :format ^{:source \"{:type \\\"csv\\\"}\", :line 30, :column 56, :end-line 30, :end-column 69} {:type \"csv\"}}}]]")}
                , document.currentScript.parentElement);</script></div></div>

<div style="background-color:grey;height:2px;width:100%;"></div>

<div><pre><small><small>source: <a href="https://github.com/scicloj/kindly-noted/blob/main/notebooks/kinds.clj">notebooks/kinds.clj</a></small></small></pre></div>